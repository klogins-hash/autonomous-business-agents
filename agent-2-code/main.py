"""
Code Review Agent - Uses Microsoft Agent Framework
This agent reviews code, finds bugs, and provides improvement suggestions
"""

import os
import asyncio
import logging
from datetime import datetime
from pathlib import Path
from typing import Optional, List

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] [%(name)s] %(levelname)s: %(message)s'
)
logger = logging.getLogger("CodeReview-Agent")


def analyze_code_file(file_path: str) -> str:
    """Analyze a code file and provide a detailed review.

    Args:
        file_path: Path to the file to analyze

    Returns:
        Analysis results
    """
    try:
        workspace = Path("/workspace")
        full_path = workspace / file_path

        if not full_path.exists():
            return f"Error: File '{file_path}' not found in workspace"

        with open(full_path, 'r') as f:
            content = f.read()

        logger.info(f"Analyzing file: {file_path} ({len(content)} chars)")

        # Return the content for the agent to analyze
        return f"File: {file_path}\n\nContent:\n{content}"

    except Exception as e:
        logger.error(f"Error analyzing file {file_path}: {e}")
        return f"Error analyzing file: {str(e)}"


def list_code_files(directory: str = ".") -> str:
    """List all code files in a directory.

    Args:
        directory: Directory to search (relative to workspace)

    Returns:
        List of code files
    """
    try:
        workspace = Path("/workspace")
        search_path = workspace / directory

        if not search_path.exists():
            return f"Error: Directory '{directory}' not found"

        # Common code file extensions
        code_extensions = {'.py', '.js', '.ts', '.java', '.cpp', '.c', '.h', '.cs', '.go', '.rb', '.php'}

        files = []
        for item in search_path.rglob("*"):
            if item.is_file() and item.suffix in code_extensions:
                rel_path = item.relative_to(workspace)
                files.append(str(rel_path))

        if files:
            logger.info(f"Found {len(files)} code files")
            return "Code files found:\n" + "\n".join(f"  - {f}" for f in sorted(files))
        else:
            return "No code files found"

    except Exception as e:
        logger.error(f"Error listing code files: {e}")
        return f"Error listing code files: {str(e)}"


def create_review_report(file_path: str, issues: str, suggestions: str) -> str:
    """Create a code review report.

    Args:
        file_path: Path to the reviewed file
        issues: List of issues found
        suggestions: Improvement suggestions

    Returns:
        Success message
    """
    try:
        workspace = Path("/workspace")
        reports_dir = workspace / "code_reviews"
        reports_dir.mkdir(exist_ok=True)

        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_name = f"review_{Path(file_path).stem}_{timestamp}.md"
        report_path = reports_dir / report_name

        report_content = f"""# Code Review Report

**File:** {file_path}
**Date:** {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
**Reviewer:** CodeReview-Agent

## Issues Found

{issues}

## Suggestions for Improvement

{suggestions}

---
*Generated by CodeReview-Agent using Microsoft Agent Framework*
"""

        with open(report_path, 'w') as f:
            f.write(report_content)

        logger.info(f"Created review report: {report_name}")
        return f"Review report created: code_reviews/{report_name}"

    except Exception as e:
        logger.error(f"Error creating report: {e}")
        return f"Error creating report: {str(e)}"


def check_code_quality_metrics(file_path: str) -> str:
    """Check basic code quality metrics.

    Args:
        file_path: Path to the file to check

    Returns:
        Quality metrics
    """
    try:
        workspace = Path("/workspace")
        full_path = workspace / file_path

        if not full_path.exists():
            return f"Error: File '{file_path}' not found"

        with open(full_path, 'r') as f:
            lines = f.readlines()

        total_lines = len(lines)
        blank_lines = sum(1 for line in lines if not line.strip())
        comment_lines = sum(1 for line in lines if line.strip().startswith('#'))
        code_lines = total_lines - blank_lines - comment_lines

        metrics = f"""Code Quality Metrics for {file_path}:
- Total lines: {total_lines}
- Code lines: {code_lines}
- Comment lines: {comment_lines}
- Blank lines: {blank_lines}
- Comment ratio: {(comment_lines / code_lines * 100):.1f}% (Target: >10%)
"""

        logger.info(f"Calculated metrics for {file_path}")
        return metrics

    except Exception as e:
        logger.error(f"Error checking metrics: {e}")
        return f"Error checking metrics: {str(e)}"


async def main():
    """Main agent loop."""
    agent_name = os.getenv("AGENT_NAME", "CodeReview-Agent")

    try:
        # Import Agent Framework components
        from agent_framework.openai import OpenAIChatClient
        from agent_framework import ChatAgent

        logger.info(f"{agent_name} starting up with Microsoft Agent Framework...")

        # Check for API key
        api_key = os.getenv("OPENAI_API_KEY")
        if not api_key:
            logger.error("OPENAI_API_KEY not set! Agent cannot function without API key.")
            logger.info("Falling back to basic loop mode...")

            # Fallback mode - just log status
            while True:
                logger.info(f"{agent_name} is running (waiting for API key configuration)")
                await asyncio.sleep(60)
            return

        # Create the Code Review Agent with tools
        # OpenAIChatClient reads from OPENAI_API_KEY environment variable
        agent = OpenAIChatClient().create_agent(
            name=agent_name,
            instructions="""You are an expert code reviewer and quality assurance agent. Your role is to:

1. Review code for bugs, security issues, and quality problems
2. Suggest improvements and best practices
3. Check code quality metrics
4. Create detailed review reports
5. Provide constructive feedback to improve code

Focus on:
- Code correctness and logic errors
- Security vulnerabilities
- Performance issues
- Code style and readability
- Best practices and design patterns
- Documentation quality

You have access to tools to analyze files, check metrics, and create reports.
Be thorough but constructive in your reviews.

Current workspace: /workspace/
""",
            tools=[
                analyze_code_file,
                list_code_files,
                create_review_report,
                check_code_quality_metrics
            ]
        )

        logger.info(f"{agent_name} initialized successfully with OpenAI GPT-4")
        logger.info("Available tools: analyze_code_file, list_code_files, create_review_report, check_code_quality_metrics")

        # Task queue - in a real system, this would come from a message queue
        task_interval = 120  # Check for tasks every 2 minutes
        review_interval = 300  # Review workspace every 5 minutes

        # Initial task: Introduce yourself
        initial_task = """Hello! Please introduce yourself and explain what kind of code reviews you can perform.
        Then check if there are any code files in the workspace that need reviewing."""

        logger.info("Running initial task...")
        try:
            result = await agent.run(initial_task)
            logger.info(f"Agent response:\n{result}")
        except Exception as e:
            logger.error(f"Error running initial task: {e}")

        # Main loop - periodically review code
        review_count = 0
        while True:
            await asyncio.sleep(review_interval)

            review_count += 1
            logger.info(f"Starting periodic code review #{review_count}...")

            # Check for code files to review
            code_files = list_code_files()

            if "No code files found" not in code_files:
                review_task = f"""Please review the code files in the workspace.
                For each file:
                1. Analyze the code for issues
                2. Check code quality metrics
                3. Create a review report if you find any issues or suggestions

                Files available:\n{code_files}"""

                try:
                    result = await agent.run(review_task)
                    logger.info(f"Review #{review_count} completed")
                except Exception as e:
                    logger.error(f"Error during code review: {e}")
            else:
                logger.info("No code files to review yet")

            # In production, you would:
            # 1. Listen for code change notifications
            # 2. Pull review requests from a queue
            # 3. Coordinate with the Developer Agent
            # 4. Report findings to a dashboard

    except ImportError as e:
        logger.error(f"Failed to import Agent Framework: {e}")
        logger.error("Make sure agent-framework is installed")

        # Fallback mode
        while True:
            logger.info(f"{agent_name} is running (Agent Framework not available)")
            await asyncio.sleep(60)

    except Exception as e:
        logger.error(f"Error in main loop: {e}", exc_info=True)
        raise


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Agent shutting down...")

