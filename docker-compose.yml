# docker-compose.yml
# Enhanced configuration with AI agents using Microsoft Agent Framework

version: "3.8"

services:
  agent-1:
    build:
      context: ./agent-image
    container_name: agent-1
    volumes:
      - ./agent-1-code:/app
      - ./shared/logs:/logs
      - ./shared/workspace:/workspace
    env_file:
      - .env
    environment:
      - AGENT_NAME=Developer-Agent
      - AGENT_ROLE=developer
      - APPROVAL_REQUIRED=false  # ‚Üê SEMI-AUTONOMOUS MODE!
      - PYTHONUNBUFFERED=1
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "test -f /app/main.py || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  agent-2:
    build:
      context: ./agent-image
    container_name: agent-2
    volumes:
      - ./agent-2-code:/app
      - ./shared/logs:/logs
      - ./shared/workspace:/workspace
    env_file:
      - .env
    environment:
      - AGENT_NAME=CodeReview-Agent
      - AGENT_ROLE=code_reviewer
      - APPROVAL_REQUIRED=true
      - PYTHONUNBUFFERED=1
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "test -f /app/main.py || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  agent-3:
    build:
      context: ./agent-image
    container_name: agent-3
    volumes:
      - ./agent-3-code:/app
      - ./shared/logs:/logs
      - ./shared/workspace:/workspace
    env_file:
      - .env
    environment:
      - AGENT_NAME=Magentic-Manager
      - AGENT_ROLE=orchestrator
      - APPROVAL_REQUIRED=true
      - PYTHONUNBUFFERED=1
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 2G
        reservations:
          cpus: '0.75'
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "test -f /app/main.py || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  agent-4:
    build:
      context: ./agent-image
    container_name: agent-4
    volumes:
      - ./agent-4-code:/app
      - ./shared/logs:/logs
      - ./shared/workspace:/workspace
      - /var/run/docker.sock:/var/run/docker.sock:ro
    env_file:
      - .env
    environment:
      - AGENT_NAME=DevOps-Agent
      - AGENT_ROLE=devops
      - APPROVAL_REQUIRED=true
      - PYTHONUNBUFFERED=1
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "test -f /app/main.py || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  agent-5:
    build:
      context: ./agent-image
    container_name: agent-5
    volumes:
      - ./agent-5-code:/app
      - ./shared/logs:/logs
      - ./shared/workspace:/workspace
    env_file:
      - .env
    environment:
      - AGENT_NAME=QA-Agent
      - AGENT_ROLE=qa_testing
      - APPROVAL_REQUIRED=true
      - PYTHONUNBUFFERED=1
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "test -f /app/main.py || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  agent-6:
    build:
      context: ./agent-image
    container_name: agent-6
    volumes:
      - ./agent-6-code:/app
      - ./shared/logs:/logs
      - ./shared/workspace:/workspace
    env_file:
      - .env
    environment:
      - AGENT_NAME=DevUI-Agent
      - AGENT_ROLE=monitoring
      - APPROVAL_REQUIRED=true
      - PYTHONUNBUFFERED=1
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD-SHELL", "test -f /app/main.py || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Observability & Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    ports:
      - "3000:3000"
    restart: unless-stopped
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /dev/disk:/dev/disk:ro
    ports:
      - "8082:8080"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M
    privileged: true
    devices:
      - /dev/kmsg

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    command:
      - '--path.rootfs=/host'
    volumes:
      - /:/host:ro,rslave
    ports:
      - "9100:9100"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M

volumes:
  prometheus-data:
  grafana-data:
